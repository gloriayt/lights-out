{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","_this$props","ncols","nrows","row","cols","col","push","Math","random","chanceLightStartsOn","coord","_this$props2","temp_board","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","setState","is_winner","every","r","c","_this2","table","_this$props3","items","_loop","concat","src_Cell_0","key","flipCellsAround","class","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.266ecd3e.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n/*\nfunction Cell (props) {\n  let classes = \"Cell\" + (props.isLit ? \" Cell-lit\" : \"\");\n  const handleClick = (evt) => {\n    props.flipCellsAroundMe();\n  }\n  return (\n    <td className={classes} onClick={handleClick} />\n  )\n}\n*/\nexport default Cell\n","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  createBoard() {\n    let board = [];\n    let {ncols, nrows} = this.props;\n    for (let row = 0; row < nrows; row++) {\n      let cols = [];\n      for (let col = 0; col < ncols; col++) {\n        cols.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(cols);\n    }\n    return board;\n  }\n\n  // Flips a cell and determines if winner\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let temp_board = this.state.board;\n    let [row, col] = coord.split(\",\").map(Number);\n    function flipCell(row, col) {\n      if (col >= 0 && col < ncols && row >= 0 && row < nrows) {\n        temp_board[row][col] = !temp_board[row][col];\n      }\n    }\n    flipCell(row, col); \n    flipCell(row, col - 1);\n    flipCell(row, col + 1); \n    flipCell(row - 1, col);\n    flipCell(row + 1, col); \n    this.setState({board:temp_board});\n    let is_winner = this.state.board.every(r => r.every(c => !c));\n    this.setState({is_winner: is_winner});\n  }\n\n  table() {\n    let table = [];\n    let row = 0;\n    let col = 0;\n    let { ncols, nrows } = this.props;\n    while (row < nrows) {\n      let items = [];\n      col = 0;\n      while (col < ncols) {\n        let coord = `${row},${col}`;\n        items.push(\n          <Cell \n            key={coord}\n            isLit={this.state.board[row][col]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n        col++\n      }\n      table.push(<tr key={row}>{items}</tr>)\n      row++\n    }\n    return (\n      <tbody>{table}</tbody>\n    )\n  }\n\n  render() {\n  return (\n    <div>\n      <div class=\"logo\"><b>Lig<span>h</span>ts <span>O</span>ut</b></div>\n      <table className=\"Board\">\n        {this.table()}\n      </table>\n    </div>\n  )\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board \n          nrows = {4}\n          ncols = {5}\n          chanceLightStartsOn = {0.2}\n          // chanceLightStartsOn: float, chance any cell is lit at start of game\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}